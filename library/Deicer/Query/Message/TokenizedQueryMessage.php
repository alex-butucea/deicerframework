<?php
/**
 * Deicer Framework (http://github.com/alex-butucea/deicerframework)
 *
 * @link       http://github.com/alex-butucea/deicerframework for canonical source repository
 * @copyright  2013 Alex Butucea <alex826@gmail.com>
 * @license    The MIT License (MIT) {@link http://opensource.org/licenses/MIT}
 */

namespace Deicer\Query\Message;

use Deicer\Query\TokenizedQueryInterface;
use Deicer\Query\Message\TokenizedQueryMessageInterface;
use Deicer\Exception\Type\NonStringException;

/**
 * A representation of an message generated by an tokenized query
 *
 * Implements an Immutable Object pattern
 *
 * @category   Deicer
 * @package    Query
 * @subpackage Message
 * @version    $id$
 * @copyright  2013 Alex Butucea <alex826@gmail.com>
 * @author     Alex Butucea <alex826@gmail.com>
 * @license    The MIT License (MIT) {@link http://opensource.org/licenses/MIT}
 */
class TokenizedQueryMessage extends AbstractQueryMessage implements
    TokenizedQueryMessageInterface
{
    /**
     * Unique token
     * 
     * @var mixed
     */
    protected $token;

    /**
     * {@inheritdoc}
     */
    public function __construct(
        $topic,
        $content,
        TokenizedQueryInterface $publisher,
        $token
    ) {
        if (! is_string($topic)) {
            throw new NonStringException();
        }

        if (! is_string($token)) {
            throw new NonStringException();
        }

        $this->topic = $topic;
        $this->content = $content;
        $this->publisher = $publisher;
        $this->token = $token;
    }

    /**
     * Retruns topic, execution time, token and json encoded content
     *
     * {@inheritdoc}
     */
    public function __toString()
    {
        return sprintf(
            self::SERIALIZED_FORMAT,
            get_class($this->publisher),
            $this->topic,
            $this->elapsedTime,
            $this->token,
            json_encode($this->content)
        );
    }

    /**
     * {@inheritdoc}
     */
    public function getToken()
    {
        return $this->token;
    }
}
